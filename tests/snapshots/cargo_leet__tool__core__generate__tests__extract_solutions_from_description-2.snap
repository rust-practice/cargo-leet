---
source: src/tool/core/generate.rs
expression: code_generated
---
//! Solution for https://leetcode.com/problems/add-two-numbers
//! 2. Add Two Numbers

// Definition for singly-linked list.
// #[derive(PartialEq, Eq, Clone, Debug)]
// pub struct ListNode {
//   pub val: i32,
//   pub next: Option<Box<ListNode>>
// }
// 
// impl ListNode {
//   #[inline]
//   fn new(val: i32) -> Self {
//     ListNode {
//       next: None,
//       val
//     }
//   }
// }
impl Solution {
    pub fn add_two_numbers(l1: Option<Box<ListNode>>, l2: Option<Box<ListNode>>) -> Option<Box<ListNode>> { todo!("Fill in body") }
}

// << ---------------- Code below here is only for local use ---------------- >>

pub struct Solution;
use cargo_leet::ListNode;

#[cfg(test)]
mod tests {
    use super::*;
    use cargo_leet::ListHead;


    use rstest::rstest;

    #[rstest]
    #[case(ListHead::from(vec![2,4,3]).into(), ListHead::from(vec![5,6,4]).into(), ListHead::from(vec![7,0,8]).into())]
    #[case(ListHead::from(vec![0]).into(), ListHead::from(vec![0]).into(), ListHead::from(vec![0]).into())]
    #[case(ListHead::from(vec![9,9,9,9,9,9,9]).into(), ListHead::from(vec![9,9,9,9]).into(), ListHead::from(vec![8,9,9,9,0,0,0,1]).into())]
    fn case(#[case] l1: Option<Box<ListNode>>, #[case]  l2: Option<Box<ListNode>>, #[case] expected: Option<Box<ListNode>>) {
        let actual = Solution::add_two_numbers(l1, l2);
        assert_eq!(actual, expected);
    }
}
