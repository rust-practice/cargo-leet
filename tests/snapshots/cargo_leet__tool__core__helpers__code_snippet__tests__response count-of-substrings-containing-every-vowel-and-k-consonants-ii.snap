---
source: src/tool/core/helpers/code_snippet.rs
expression: get_code_snippets_response(title_slug).unwrap()
---
CodeSnippetResponse {
    data: Data {
        question: Question {
            code_snippets: [
                CodeSnippet {
                    lang: "C++",
                    code: "class Solution {\npublic:\n    long long countOfSubstrings(string word, int k) {\n        \n    }\n};",
                },
                CodeSnippet {
                    lang: "Java",
                    code: "class Solution {\n    public long countOfSubstrings(String word, int k) {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Python",
                    code: "class Solution(object):\n    def countOfSubstrings(self, word, k):\n        \"\"\"\n        :type word: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
                },
                CodeSnippet {
                    lang: "Python3",
                    code: "class Solution:\n    def countOfSubstrings(self, word: str, k: int) -> int:\n        ",
                },
                CodeSnippet {
                    lang: "C",
                    code: "long long countOfSubstrings(char* word, int k) {\n    \n}",
                },
                CodeSnippet {
                    lang: "C#",
                    code: "public class Solution {\n    public long CountOfSubstrings(string word, int k) {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "JavaScript",
                    code: "/**\n * @param {string} word\n * @param {number} k\n * @return {number}\n */\nvar countOfSubstrings = function(word, k) {\n    \n};",
                },
                CodeSnippet {
                    lang: "TypeScript",
                    code: "function countOfSubstrings(word: string, k: number): number {\n    \n};",
                },
                CodeSnippet {
                    lang: "PHP",
                    code: "class Solution {\n\n    /**\n     * @param String $word\n     * @param Integer $k\n     * @return Integer\n     */\n    function countOfSubstrings($word, $k) {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Swift",
                    code: "class Solution {\n    func countOfSubstrings(_ word: String, _ k: Int) -> Int {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Kotlin",
                    code: "class Solution {\n    fun countOfSubstrings(word: String, k: Int): Long {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Dart",
                    code: "class Solution {\n  int countOfSubstrings(String word, int k) {\n    \n  }\n}",
                },
                CodeSnippet {
                    lang: "Go",
                    code: "func countOfSubstrings(word string, k int) int64 {\n    \n}",
                },
                CodeSnippet {
                    lang: "Ruby",
                    code: "# @param {String} word\n# @param {Integer} k\n# @return {Integer}\ndef count_of_substrings(word, k)\n    \nend",
                },
                CodeSnippet {
                    lang: "Scala",
                    code: "object Solution {\n    def countOfSubstrings(word: String, k: Int): Long = {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Rust",
                    code: "impl Solution {\n    pub fn count_of_substrings(word: String, k: i32) -> i64 {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Racket",
                    code: "(define/contract (count-of-substrings word k)\n  (-> string? exact-integer? exact-integer?)\n  )",
                },
                CodeSnippet {
                    lang: "Erlang",
                    code: "-spec count_of_substrings(Word :: unicode:unicode_binary(), K :: integer()) -> integer().\ncount_of_substrings(Word, K) ->\n  .",
                },
                CodeSnippet {
                    lang: "Elixir",
                    code: "defmodule Solution do\n  @spec count_of_substrings(word :: String.t, k :: integer) :: integer\n  def count_of_substrings(word, k) do\n    \n  end\nend",
                },
            ],
        },
    },
}
