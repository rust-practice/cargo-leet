---
source: src/tool/core/helpers/code_snippet.rs
expression: get_code_snippets_response(title_slug).unwrap()
---
CodeSnippetResponse {
    data: Data {
        question: Question {
            code_snippets: [
                CodeSnippet {
                    lang: "C++",
                    code: "class Solution {\npublic:\n    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {\n        \n    }\n};",
                },
                CodeSnippet {
                    lang: "Java",
                    code: "class Solution {\n    public int[][] floodFill(int[][] image, int sr, int sc, int color) {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Python",
                    code: "class Solution(object):\n    def floodFill(self, image, sr, sc, color):\n        \"\"\"\n        :type image: List[List[int]]\n        :type sr: int\n        :type sc: int\n        :type color: int\n        :rtype: List[List[int]]\n        \"\"\"\n        ",
                },
                CodeSnippet {
                    lang: "Python3",
                    code: "class Solution:\n    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:\n        ",
                },
                CodeSnippet {
                    lang: "C",
                    code: "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** floodFill(int** image, int imageSize, int* imageColSize, int sr, int sc, int color, int* returnSize, int** returnColumnSizes) {\n    \n}",
                },
                CodeSnippet {
                    lang: "C#",
                    code: "public class Solution {\n    public int[][] FloodFill(int[][] image, int sr, int sc, int color) {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "JavaScript",
                    code: "/**\n * @param {number[][]} image\n * @param {number} sr\n * @param {number} sc\n * @param {number} color\n * @return {number[][]}\n */\nvar floodFill = function(image, sr, sc, color) {\n    \n};",
                },
                CodeSnippet {
                    lang: "TypeScript",
                    code: "function floodFill(image: number[][], sr: number, sc: number, color: number): number[][] {\n    \n};",
                },
                CodeSnippet {
                    lang: "PHP",
                    code: "class Solution {\n\n    /**\n     * @param Integer[][] $image\n     * @param Integer $sr\n     * @param Integer $sc\n     * @param Integer $color\n     * @return Integer[][]\n     */\n    function floodFill($image, $sr, $sc, $color) {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Swift",
                    code: "class Solution {\n    func floodFill(_ image: [[Int]], _ sr: Int, _ sc: Int, _ color: Int) -> [[Int]] {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Kotlin",
                    code: "class Solution {\n    fun floodFill(image: Array<IntArray>, sr: Int, sc: Int, color: Int): Array<IntArray> {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Dart",
                    code: "class Solution {\n  List<List<int>> floodFill(List<List<int>> image, int sr, int sc, int color) {\n    \n  }\n}",
                },
                CodeSnippet {
                    lang: "Go",
                    code: "func floodFill(image [][]int, sr int, sc int, color int) [][]int {\n    \n}",
                },
                CodeSnippet {
                    lang: "Ruby",
                    code: "# @param {Integer[][]} image\n# @param {Integer} sr\n# @param {Integer} sc\n# @param {Integer} color\n# @return {Integer[][]}\ndef flood_fill(image, sr, sc, color)\n    \nend",
                },
                CodeSnippet {
                    lang: "Scala",
                    code: "object Solution {\n    def floodFill(image: Array[Array[Int]], sr: Int, sc: Int, color: Int): Array[Array[Int]] = {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Rust",
                    code: "impl Solution {\n    pub fn flood_fill(image: Vec<Vec<i32>>, sr: i32, sc: i32, color: i32) -> Vec<Vec<i32>> {\n        \n    }\n}",
                },
                CodeSnippet {
                    lang: "Racket",
                    code: "(define/contract (flood-fill image sr sc color)\n  (-> (listof (listof exact-integer?)) exact-integer? exact-integer? exact-integer? (listof (listof exact-integer?)))\n  )",
                },
                CodeSnippet {
                    lang: "Erlang",
                    code: "-spec flood_fill(Image :: [[integer()]], Sr :: integer(), Sc :: integer(), Color :: integer()) -> [[integer()]].\nflood_fill(Image, Sr, Sc, Color) ->\n  .",
                },
                CodeSnippet {
                    lang: "Elixir",
                    code: "defmodule Solution do\n  @spec flood_fill(image :: [[integer]], sr :: integer, sc :: integer, color :: integer) :: [[integer]]\n  def flood_fill(image, sr, sc, color) do\n    \n  end\nend",
                },
            ],
        },
    },
}
